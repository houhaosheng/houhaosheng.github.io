<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Auf das Leben!]]></title>
  <link href="http://houhaosheng.github.io/atom.xml" rel="self"/>
  <link href="http://houhaosheng.github.io/"/>
  <updated>2015-11-14T18:16:54+01:00</updated>
  <id>http://houhaosheng.github.io/</id>
  <author>
    <name><![CDATA[Haosheng Hou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Useful Tips for Excel VBA]]></title>
    <link href="http://houhaosheng.github.io/blog/2015/11/13/useful-tips-for-excel-vba/"/>
    <updated>2015-11-13T22:52:37+01:00</updated>
    <id>http://houhaosheng.github.io/blog/2015/11/13/useful-tips-for-excel-vba</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;ve been working intensively with Excel VBA to achieve some automation of data processing and analysing. During my first approches to use VBA, I found some really useful tips for newbies in this area.</p>

<h2>1.Think Before Coding.</h2>

<p>This is definitely the iron-rule of coding, regardless of the programming language. You have to fully understand what problem are you solving, which function or method do you need exactly for this problem. I will introduce some useful steps for clearing the problem and also get to know what you are really facing in the following text.</p>

<h2>2.Use Immediate Window</h2>

<p>This is a useful function that embedded in Excel. You can get instant result of your command in this window, therefore, it is a really good friend while you are debugging.</p>

<h2>3.Use Debug.Print</h2>

<p>If you don&rsquo;t know what results your stated formula in VBA will get, this is the one command you should turn to for some help. Just simply type in the command and add the variable you want to know after the command.</p>

<pre><code>:Debug.Print Variable
</code></pre>

<h2>4.Always Break Your Work Into Smaller Pieces</h2>

<p>I will show you how this works through a really simple example. My task would be add a button into the worksheet, it can achieve the function of copying certain range of values and paste it somewhere. I will first disassemble this task into 3 steps.</p>

<blockquote><p>1.Write code about the function of copy and paste</p>

<p>2.Add a button to the worksheet</p>

<p>3.Assign the function to the button</p></blockquote>

<p>Of course, you can further disassemble step one, maybe first learn about the knowledge of &ldquo;Range&rdquo; object. It depends on your level.</p>

<h2>5.Build Iteratively To Fully Understand The Task</h2>

<p>Maybe for people not familier with programming, this is a good approach. For iterative problems, we have to consider all the conditions and loops. With listing some of them without loop, you can get a better and straightforward view of your task. This can save a lot of work if you write your loops wrong and debugging afterwards.</p>

<h2>6.Refer Not Only to Internet, But Also Refer To A Good Book</h2>

<p>Internet is a useful tool for some instant problems. But if you want to use VBA for a long term, you may better invest more time on learning it through a book. To be honest, I don&rsquo;t really have that much time to read the book, but I&rsquo;ve found some really useful conceptural knowledge in the following book.</p>

<blockquote><p>Excel Power Programming with VBA by John Walkenbach</p></blockquote>

<h2>7.Always Optimize Your Code and Speedup</h2>

<pre><code>:‘turn off some Excel functionality so your code runs faster

:Application.ScreenUpdating = False

:Application.DisplayStatusBar = False

:Application.Calculation = xlCalculationManual

:Application.EnableEvents = False

:ActiveSheet.DisplayPageBreaks = False      ‘note this is a sheet-level setting


:‘Your code here


:‘after your code runs, restore state; put this at the end of your code

:Application.ScreenUpdating = screenUpdateState

:Application.DisplayStatusBar = statusBarState

:Application.Calculation = calcState

:Application.EnableEvents = eventsState

:ActiveSheet.DisplayPageBreaks = displayPageBreaksState   ‘note this is a sheet-level setting 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim Notes]]></title>
    <link href="http://houhaosheng.github.io/blog/2015/10/04/vim-notes/"/>
    <updated>2015-10-04T19:58:12+02:00</updated>
    <id>http://houhaosheng.github.io/blog/2015/10/04/vim-notes</id>
    <content type="html"><![CDATA[<h2>1.Lowercase/Uppercase</h2>

<p>In order to change the case of the whole document in vi, the following commands can do that trick easily.</p>

<p>in lowercase:</p>

<pre><code>:%s/.*/\L&amp;/ 
</code></pre>

<p>in uppercase:</p>

<pre><code>:%s/.*/\U&amp;/ 
</code></pre>

<h2>2.Show line numbers</h2>

<p>If you wanna show the line numbers in vi environment, just type in the following command.</p>

<pre><code>:set nu
</code></pre>
]]></content>
  </entry>
  
</feed>
